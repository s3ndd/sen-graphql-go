// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type PageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}

type SessionConnection struct {
	Sessions []*Session `json:"sessions"`
}

type UpdateSessionStatusRequest struct {
	SessionID  string        `json:"sessionID"`
	RetailerID string        `json:"retailerID"`
	SiteID     string        `json:"siteID"`
	Status     SessionStatus `json:"status"`
}

type EventSubType string

const (
	EventSubTypeIn      EventSubType = "IN"
	EventSubTypeOut     EventSubType = "OUT"
	EventSubTypeAdd     EventSubType = "ADD"
	EventSubTypeRemove  EventSubType = "REMOVE"
	EventSubTypeReplace EventSubType = "REPLACE"
)

var AllEventSubType = []EventSubType{
	EventSubTypeIn,
	EventSubTypeOut,
	EventSubTypeAdd,
	EventSubTypeRemove,
	EventSubTypeReplace,
}

func (e EventSubType) IsValid() bool {
	switch e {
	case EventSubTypeIn, EventSubTypeOut, EventSubTypeAdd, EventSubTypeRemove, EventSubTypeReplace:
		return true
	}
	return false
}

func (e EventSubType) String() string {
	return string(e)
}

func (e *EventSubType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSubType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSubType", str)
	}
	return nil
}

func (e EventSubType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeShopping  EventType = "SHOPPING"
	EventTypeInference EventType = "INFERENCE"
)

var AllEventType = []EventType{
	EventTypeShopping,
	EventTypeInference,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeShopping, EventTypeInference:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IntegrationType string

const (
	IntegrationTypePos         IntegrationType = "POS"
	IntegrationTypePosLess     IntegrationType = "POS_LESS"
	IntegrationTypeProductOnly IntegrationType = "PRODUCT_ONLY"
)

var AllIntegrationType = []IntegrationType{
	IntegrationTypePos,
	IntegrationTypePosLess,
	IntegrationTypeProductOnly,
}

func (e IntegrationType) IsValid() bool {
	switch e {
	case IntegrationTypePos, IntegrationTypePosLess, IntegrationTypeProductOnly:
		return true
	}
	return false
}

func (e IntegrationType) String() string {
	return string(e)
}

func (e *IntegrationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntegrationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntegrationType", str)
	}
	return nil
}

func (e IntegrationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SessionStatus string

const (
	SessionStatusUnspecified SessionStatus = "UNSPECIFIED"
	SessionStatusShopping    SessionStatus = "SHOPPING"
	SessionStatusPaused      SessionStatus = "PAUSED"
	SessionStatusHeld        SessionStatus = "HELD"
	SessionStatusPrecheckout SessionStatus = "PRECHECKOUT"
	SessionStatusCheckout    SessionStatus = "CHECKOUT"
	SessionStatusPaid        SessionStatus = "PAID"
	SessionStatusFinished    SessionStatus = "FINISHED"
	SessionStatusCancelled   SessionStatus = "CANCELLED"
)

var AllSessionStatus = []SessionStatus{
	SessionStatusUnspecified,
	SessionStatusShopping,
	SessionStatusPaused,
	SessionStatusHeld,
	SessionStatusPrecheckout,
	SessionStatusCheckout,
	SessionStatusPaid,
	SessionStatusFinished,
	SessionStatusCancelled,
}

func (e SessionStatus) IsValid() bool {
	switch e {
	case SessionStatusUnspecified, SessionStatusShopping, SessionStatusPaused, SessionStatusHeld, SessionStatusPrecheckout, SessionStatusCheckout, SessionStatusPaid, SessionStatusFinished, SessionStatusCancelled:
		return true
	}
	return false
}

func (e SessionStatus) String() string {
	return string(e)
}

func (e *SessionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionStatus", str)
	}
	return nil
}

func (e SessionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
